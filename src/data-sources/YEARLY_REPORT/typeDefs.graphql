type StatisticsByApplicationType {
	applications: Int!
	accepted: Int!

	electronicsDepartment: Int!
	fundamentalEducationDepartment: Int!
	powerAndContorlDepartment: Int!

	controlMajor: Int!
	electronicsMajor: Int!
	powerMajor: Int!
	telecommunicationMajor: Int!

	female: Int!
	male: Int!
}

type Statistics {
	addThesisCoSupervisorApplication: StatisticsByApplicationType!
	confirmationApplication: StatisticsByApplicationType!
	confrenceApplication: StatisticsByApplicationType!
	internshipApplication: StatisticsByApplicationType!
	promotionApplication: StatisticsByApplicationType!
	thesisTitleChangeApplication: StatisticsByApplicationType!
}

type Session {
	_id: ID!
	submissionsStartDate: Date!
	submissionsEndDate: Date!
	mettingDate: Date!
	mettingAgenda: [String]!
	hasStatistics: Boolean!
	statistics: Statistics
	onSubmissionPeriod: Boolean!
	onReviewPeriod: Boolean!
	onMettingDate: Boolean!
}

type YearlyReport {
	_id: ID!
	year: String
	sessions: [Session]
	statistics: Statistics
}

extend type Query {
	activeSession: Session
	yearlyReportStatistics(year: String!): YearlyReport!
	yearlyReports: [YearlyReport]!
}

input addSessionInput {
	submissionsStartDate: Date!
	submissionsEndDate: Date!
	mettingDate: Date!
}

input setMettingAgendaInput {
	sessionID: ID!
	mettingAgenda: [String!]!
}

extend type Mutation {
	addSession(input: addSessionInput!): Session!
	setMettingAgenda(input: setMettingAgendaInput): Session!
}